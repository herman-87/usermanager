openapi: 3.0.3
info:
  title: "Authentication Manager REST API"
  description: "API for managing user authentication, including registration, login, and token management."
  version: "0.0.1-SNAPSHOT"
servers:
  - url: "http://localhost:8180/api"
tags:
  - name: "User"
    description: "Endpoints for user authentication and account management."
paths:
  /public/user/register:
    post:
      summary: "User registration"
      description: "Registers a new user and returns the created user details."
      operationId: "registerUser"
      tags:
        - "User"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUser'
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserId'
  /user/{id}:
    get:
      summary: "Get user by ID"
      operationId: "getUserById"
      tags:
        - "User"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "The ID of the user to retrieve"
          schema:
            type: "string"
            format: "uuid"
      responses:
        200:
          description: "User found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: "User not found"
    delete:
      summary: "Delete user by ID"
      description: "Deletes an existing user by their ID."
      operationId: "deleteUserById"
      tags:
        - "User"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "The ID of the user to delete"
          schema:
            type: "string"
            format: "uuid"
      responses:
        204:
          description: "User successfully deleted"
        404:
          description: "User not found"
  /user/me:
    get:
      summary: "Get current authenticated user"
      operationId: "getCurrentUser"
      tags:
        - "User"
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: "Current user information"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: "Unauthorized â€“ User is not authenticated"
    put:
      summary: "Update my user information"
      description: "Updates the information of the currently authenticated user and returns the updated user details."
      operationId: "updateMyUserInfo"
      tags:
        - "User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        200:
          description: "User updated successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: "Unauthorized - Authentication token is missing or invalid"
        403:
          description: "Forbidden - The user does not have permission to perform this operation"
components:
  schemas:
    UpdateUser:
      type: "object"
      properties:
        username:
          type: "string"
        email:
          type: "string"
        phoneNumber:
          $ref: "#/components/schemas/PhoneNumber"
        firstName:
          type: "string"
        lastName:
          type: "string"
    RegisterUser:
      type: "object"
      required:
        - "username"
        - "password"
      properties:
        username:
          type: "string"
        password:
          type: "string"
        email:
          type: "string"
        phoneNumber:
          $ref: "#/components/schemas/PhoneNumber"
        firstName:
          type: "string"
        lastName:
          type: "string"
    PhoneNumber:
      type: "object"
      required:
        - "countryCode"
        - "number"
      properties:
        countryCode:
          type: "string"
        number:
          type: "string"
    UserId:
      type: "object"
      required:
        - "id"
      properties:
        id:
          type: "string"
          format: "uuid"
    User:
      type: "object"
      required:
        - "id"
      properties:
        id:
          type: "string"
          format: "uuid"
        username:
          type: "string"
        password:
          type: "string"
        email:
          type: "string"
        phoneNumber:
          $ref: "#/components/schemas/PhoneNumber"
        firstName:
          type: "string"
        lastName:
          type: "string"

